{"version":3,"sources":["assets/swipe.gif","assets/loading.gif","NasaAPI.js","components/Picture.js","App.js","index.js"],"names":["module","exports","transformDateForAPIRequest","date","year","getFullYear","month","getMonth","day","getDate","Picture","author","title","url","slideDownHandler","useState","startPointY","setStartPointY","diffY","setDiffY","container","useRef","img","details","useEffect","gsap","from","current","y","ease","x","delay","slideUpHandle","to","t1","setTimeout","clearTimeout","className","data-testid","ref","onTouchEnd","onTouchStart","e","touches","clientY","touchStartHandler","onTouchMove","touchMoveHandler","src","alt","size","color","onClick","App","picturesTest","pictures","updatePictures","i","setIndex","prevI","setPrevIndex","index","setCurrentIndex","slideDown","setSlideDown","startPointX","setStartPointX","diffX","setDiffX","bgImg","swipeLeft","swipeDown","swipeUp","handleRight","length","handleLeft","slideDownHandle","startDate","endDate","Promise","resolve","reject","a","startDateFormatted","endDateFormatted","process","headers","Headers","fetch","method","then","response","status","json","getNASAPictures","Date","res","interval","setInterval","window","innerWidth","style","display","opacity","duration","clearInterval","clientX","swipe","Placeholder","copyright","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49b18b73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swipe.c68f9eaa.gif\";","module.exports = __webpack_public_path__ + \"static/media/loading.20750692.gif\";","const NASA_KEY = process.env.REACT_APP_API_KEY;\n\n// Expects a js Date, returns a string in YYYY-MM-DD format\nfunction transformDateForAPIRequest(date) {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  if (month < 10) {\n    month = `0${month}`;\n  }\n  if (day < 10) {\n    day = `0${day}`;\n  }\n  return `${year}-${month}-${day}`; // format 2021-08-22\n}\n\nexport function getNASAPictures(startDate, endDate) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const startDateFormatted = transformDateForAPIRequest(startDate);\n      const endDateFormatted = transformDateForAPIRequest(endDate);\n\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${NASA_KEY}&start_date=${startDateFormatted}&end_date=${endDateFormatted}`;\n      const headers = new Headers({\n        \"Content-Type\": \"application/json\",\n      });\n\n      await fetch(url, {\n        method: \"GET\",\n        headers,\n      }).then((response) => {\n        if (response.status >= 200 && response.status < 300) {\n          resolve(response.json());\n        } else {\n          reject(response.json());\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { IoIosArrowDropupCircle as UpIcon } from \"react-icons/io\";\nimport { gsap } from \"gsap\";\n\nconst Picture = ({ author, title, url, date, slideDownHandler }) => {\n  const [startPointY, setStartPointY] = useState(0)\n  const [diffY, setDiffY] = useState(0)\n  const container = useRef(null)\n  const img = useRef(null)\n  const details = useRef(null)\n  useEffect(() => {\n    // container from above\n    gsap.from(container.current, {\n      y: -700,\n      ease: \"power3.out\",\n    })\n    // img from left\n    gsap.from(img.current, {\n      x: -1200,\n      delay: 0.5,\n      ease: \"circ.out\",\n    })\n    // text from right\n    gsap.from(details.current, {\n      x: 1500,\n      delay: 0.3,\n      ease: \"circ.out\",\n    })\n\n  }, [])\n  const slideUpHandle = () => {\n    gsap.to(container.current, {\n      y: -800,\n      delay: 0.1,\n      ease: \"slow(0.7, 0.7, false)\",\n    })\n    const t1 = setTimeout(() => {\n      slideDownHandler(false)\n      clearTimeout(t1)\n    }, 300)\n  }\n  const touchStartHandler = (e) => {\n    setStartPointY(e.touches[0].clientY)\n  }\n  const touchMoveHandler = (e) => {\n    setDiffY(startPointY - e.touches[0].clientY)\n  }\n  const touchEndHandler = () => {\n    if (diffY > 0) {\n      slideUpHandle()\n    }\n  }\n  return (\n    <div className='picture-container' data-testid='current-picture-container' ref={container} onTouchEnd={() => touchEndHandler()} onTouchStart={(e) => touchStartHandler(e)} onTouchMove={(e) => touchMoveHandler(e)} >\n      <img src={url} alt='picture_of_the_day' className='img' ref={img} data-testid='current-picture' />\n      <div className='picture-details' ref={details}>\n        <h2 data-testid='current-picture-title' className='picture-title'>{title}</h2>\n        <h4 data-testid='current-picture-author' className='picture-author'>{author}</h4>\n        <span>{date}</span>\n      </div>\n      <UpIcon size={70} color='black' onClick={() => slideUpHandle()} className='icon-up' />\n    </div>\n  )\n}\nexport default Picture;","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { getNASAPictures } from \"./NasaAPI\";\nimport { gsap } from \"gsap\";\nimport Picture from './components/Picture';\nimport Placeholder from './assets/loading.gif';\nimport swipe from './assets/swipe.gif';\nimport { IoIosArrowDroprightCircle as RightIcon } from \"react-icons/io\";\nimport { IoIosArrowDropleftCircle as LeftIcon } from \"react-icons/io\";\nimport { IoIosArrowDropdownCircle as BottomIcon } from \"react-icons/io\";\n\nconst App = ({ picturesTest = null }) => {\n  const [pictures, updatePictures] = useState(null);\n  const [i, setIndex] = useState(0)\n  const [prevI, setPrevIndex] = useState(0)\n  const [index, setCurrentIndex] = useState(0)\n  const [slideDown, setSlideDown] = useState(false)\n  const [startPointX, setStartPointX] = useState(0)\n  const [startPointY, setStartPointY] = useState(0)\n  const [diffX, setDiffX] = useState(0)\n  const [diffY, setDiffY] = useState(0)\n  const img = useRef(null)\n  const bgImg = useRef(null)\n  const swipeLeft = useRef(null)\n  const swipeDown = useRef(null)\n  const swipeUp = useRef(null)\n\n  const handleRight = () => {\n    if (i === pictures.length - 1) {\n      setPrevIndex(i)\n      setIndex(0)\n    } else {\n      setPrevIndex(i)\n      setIndex(i + 1)\n    }\n    gsap.from(img.current, {\n      x: -800,\n      ease: \"circ.out\",\n    })\n    gsap.to(img.current, {\n      x: 0,\n      ease: \"circ.out\",\n    })\n  }\n  const handleLeft = () => {\n    if (i === 0) {\n      setPrevIndex(i)\n      setIndex(pictures.length - 1)\n    } else {\n      setPrevIndex(i)\n      setIndex(i - 1)\n    }\n    gsap.from(img.current, {\n      x: 800,\n      ease: \"circ.out\",\n    })\n    gsap.to(img.current, {\n      x: 0,\n      ease: \"circ.out\",\n    })\n  }\n  const slideDownHandle = () => {\n    setSlideDown(true)\n    setCurrentIndex(i)\n  }\n  const touchStartHandler = (e) => {\n    setStartPointX(e.touches[0].clientX)\n    setStartPointY(e.touches[0].clientY)\n  }\n  const touchMoveHandler = (e) => {\n    setDiffX(startPointX - e.touches[0].clientX)\n    setDiffY(startPointY - e.touches[0].clientY)\n  }\n  const touchEndHandler = () => {\n    if (diffY < -40) {\n      slideDownHandle()\n    }\n    if (diffX > 20) {\n      handleLeft()\n    }\n    if (diffX < -20) {\n      handleRight()\n    }\n  }\n  useEffect(() => {\n    if (picturesTest) {\n      updatePictures(picturesTest)\n    }\n    if (!pictures && !picturesTest) { // if pictures is null and this is not a test.\n      const startDate = new Date(\"2021-08-20T08:28:41.917Z\"); // start day: 2021-08-20\n      const endDate = new Date(\"2021-08-22T08:28:41.917Z\"); //Use yesterday date because if it passes midnight the API will fail.\n      getNASAPictures(startDate, endDate).then((res) => {\n        updatePictures(res);\n      });\n      if (pictures) {\n        setPrevIndex(pictures.length - 1)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pictures]); //if pictures changes, re-render.\n  useEffect(() => {\n    if (pictures) {\n      var interval = setInterval(() => handleRight(), 5000)\n      // Check if the media query is true\n      if (window.innerWidth <= 768) {\n        swipeLeft.current.style.display = 'block'\n        swipeDown.current.style.display = 'block'\n        if (slideDown) {\n          swipeUp.current.style.display = 'block'\n          setTimeout(() => {\n            gsap.to(swipeUp.current, {\n              opacity: 0,\n              duration: 1,\n              ease: 'power4.out'\n            })\n          }, 2000)\n        }\n        setTimeout(() => {\n          gsap.to(swipeLeft.current, {\n            opacity: 0,\n            duration: 1,\n            ease: 'power4.out'\n          })\n          gsap.to(swipeDown.current, {\n            opacity: 0,\n            duration: 1,\n            ease: 'power4.out'\n          })\n        }, 5000)\n      }\n      if (window.innerWidth > 768) {\n        swipeLeft.current.style.display = 'none'\n        swipeDown.current.style.display = 'none'\n        swipeUp.current.style.display = 'none'\n      }\n    }\n    return () => clearInterval(interval)\n  })\n\n  return (\n    <div className=\"App\">\n      {\n        !pictures ?\n          <img\n            src={Placeholder}\n            alt='placeholder_loading_gif'\n            className='loading-gif'\n            data-testid='loading-gif' /> :\n          <div className='gallery' data-testid='gallery' >\n            <RightIcon data-testid='right-arrow' size={70} onClick={() => handleRight()} className='icon-left' />\n            <div className='gallery-img-container'>\n              <img data-testid='img'\n                onTouchEnd={() => touchEndHandler()}\n                onTouchStart={(e) => touchStartHandler(e)}\n                onTouchMove={(e) => touchMoveHandler(e)}\n                src={pictures[i].url}\n                alt='picture_of_the_day'\n                className='img_gallery'\n                ref={img} />\n              <img src={pictures[prevI].url} alt='picture_of_the_day' className='img_gallery_bg' ref={bgImg} />\n              <img src={swipe} alt='swipe_gif' className='swipe-left-gif' ref={swipeLeft} />\n              <img src={swipe} alt='swipe_gif' className='swipe-down-gif' ref={swipeDown} />\n              <img src={swipe} alt='swipe_gif' className='swipe-up-gif' ref={swipeUp} />\n            </div>\n            <LeftIcon data-testid='left-arrow' size={70} onClick={() => handleLeft()} className='icon-right' />\n            <BottomIcon size={70} color='cccccc' onClick={() => slideDownHandle()} className='icon-bottom' data-testid='btn-down' />\n          </div>\n\n      }\n      {\n        slideDown ?\n          <Picture\n            author={pictures[index].copyright}\n            title={pictures[index].title}\n            url={pictures[index].url}\n            date={pictures[index].date}\n            slideDownHandler={setSlideDown}\n          />\n          : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}